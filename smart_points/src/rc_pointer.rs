//! 大部分情况下所有权是非常明确的: 可以准确地知道哪个变量拥有某个值.
//! 然而, 有些情况单个值可能会有多个所有者. 例如, 在图数据结构中, 多个边可能指向相同的节点
//! 而这个节点从概念上讲为所有指向它的边所拥有. 节点直到没有任何边指向它之前都不应该被清理
//!
//! 为了启用多所有权, Rust 有一个叫做 Rc<T> 的类型. 其名称为 引用计数(reference counting)的缩写.
//! 引用计数意味着记录一个值引用的数量来知晓这个值是否仍在被使用. 如果某个值有零个引用, 就代表没有任何有效引用并可以被清理.
//!
//! Rc<T> 用于当我们希望在堆上分配一些内存供程序的多个部分读取, 而且无法在编译时确定程序的哪一部分会最后结束使用它的时候.
//! 如果确实知道哪部分是最后一个结束使用的话, 就可以令其成为数据的所有者, 正常的所有权规则就可以在编译时生效.
//! 
//! TODO: Rc<T> 只能用在单线程, 十六章会讲到多线程的

pub fn entry() {}
